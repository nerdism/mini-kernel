#ifndef KEYCODES_H
#define KEYCODES_H

#include "types.h"

#define PORT 0x60


/* keycodes according to scan code set 1 */

#define LSHIFT 0x2a
#define RSHIFT 0x36
#define ALT 0x38 // Right alt scan code comes with an extra code 0xE0
#define NUMPAD 0x45
#define INVALID 0

static const uint8_t keycodes[128][2] = {
        {INVALID, INVALID},
        {27, 27}, // ESC
        {'1', '!'},
        {'2', '@'},
        {'3', '#'},
        {'4', '$'},
        {5,   '%'},
        {'6', '^'},
        {'7', '&'},
        {'8', '*'},
        {'9', '('},
        {'0', ')'},
        {'-', '_'},
        {'=', '+'},
        {8,     8}, // backspace
        {9,     9}, // TAB
        {'q', 'Q'},
        {'w', 'W'},
        {'e', 'E'},
        {'r', 'R'},
        {'t', 'T'},
        {'y', 'Y'},
        {'u', 'U'},
        {'i', 'I'},
        {'o', 'O'},
        {'p', 'P'},
        {'[', '{'},
        {']', '}'},
        {13,   13}, // Enter
        {INVALID, INVALID},
        {'a', 'A'},
        {'s', 'S'},
        {'d', 'D'},
        {'f', 'F'},
        {'g', 'G'},
        {'h', 'H'},
        {'j', 'J'},
        {'k', 'K'},
        {'l', 'L'},
        {';', ':'},
        {'\'', '\"'},
        {'`', '~'},
        {INVALID, INVALID},
        {'\\', '|'},
        {'z', 'Z'},
        {'x', 'X'},
        {'c', 'C'},
        {'v', 'V'},
        {'b', 'B'},
        {'n', 'N'},
        {'m', 'm'},
        {',', '<'},
        {'.', '>'},
        {'/', '?'},
        {INVALID, INVALID},
        {'*', '*'},
        {INVALID, INVALID},
        {' ', ' '},
        {INVALID, INVALID},
        {INVALID, INVALID},
        {INVALID, INVALID},
        {INVALID, INVALID},
        {INVALID, INVALID},
        {INVALID, INVALID},
        {INVALID, INVALID},
        {INVALID, INVALID},
        {INVALID, INVALID},
        {INVALID, INVALID},
        {INVALID, INVALID},
        {INVALID, INVALID},
        {INVALID, INVALID},
        {'7', '7'}, // NUMPAD keys
        {'8', '8'},
        {'9', '9'},
        {'-', '-'},
        {'4', '4'},
        {'5', '5'},
        {'6', '6'},
        {'+', '+'},
        {'1', '1'},
        {'2', '2'},
        {'3', '3'},
        {'0', '0'},
        {INVALID, INVALID}, // Delete
        {INVALID, INVALID},
        {INVALID, INVALID},
        {INVALID, INVALID},
        {INVALID, INVALID},
        {INVALID, INVALID},
        {INVALID, INVALID},
        {INVALID, INVALID},
        {INVALID, INVALID},
        {INVALID, INVALID},
        {INVALID, INVALID},
        {INVALID, INVALID},
        {INVALID, INVALID},
        {INVALID, INVALID},
        {INVALID, INVALID},
        {INVALID, INVALID},
        {INVALID, INVALID},
        {INVALID, INVALID},
        {INVALID, INVALID},
        {INVALID, INVALID},
        {INVALID, INVALID},
        {INVALID, INVALID},
        {INVALID, INVALID},
        {INVALID, INVALID},
        {INVALID, INVALID},
        {INVALID, INVALID},
        {INVALID, INVALID},
        {INVALID, INVALID},
        {INVALID, INVALID},
        {INVALID, INVALID},
        {INVALID, INVALID},
        {INVALID, INVALID},
        {INVALID, INVALID},
        {INVALID, INVALID},
        {INVALID, INVALID},
        {INVALID, INVALID},
        {INVALID, INVALID},
        {INVALID, INVALID},
        {INVALID, INVALID},
        {INVALID, INVALID},
        {INVALID, INVALID},
        {INVALID, INVALID},
        {INVALID, INVALID},
        {INVALID, INVALID},
        {INVALID, INVALID},
};

#endif
